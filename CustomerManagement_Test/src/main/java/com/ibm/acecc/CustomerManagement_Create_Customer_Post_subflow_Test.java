package com.ibm.acecc;

import java.io.InputStream;
import java.nio.charset.StandardCharsets;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import com.ibm.integration.test.v1.NodeSpy;
import com.ibm.integration.test.v1.SpyObjectReference;
import com.ibm.integration.test.v1.TestMessageAssembly;
import com.ibm.integration.test.v1.TestSetup;
import com.ibm.integration.test.v1.exception.TestException;

import static com.ibm.integration.test.v1.Matchers.*;
import static net.javacrumbs.jsonunit.JsonMatchers.jsonEquals;
import static org.hamcrest.MatcherAssert.assertThat;

public class CustomerManagement_Create_Customer_Post_subflow_Test {

	/*
	 * CustomerManagement_Create_Customer_subflow_0001_Test
	 * Test generated by IBM App Connect Enterprise Toolkit 12.0.3.0 on 22 Jul, 2022 4:45:38 PM
	 */

	@AfterEach
	public void cleanupTest() throws TestException {
		// Ensure any mocks created by a test are cleared after the test runs 
		TestSetup.restoreAllMocks();
	}

	@Test
	public void CustomerManagement_Create_Customer_subflow_TestCase_001() throws TestException {

		// Define the SpyObjectReference
		SpyObjectReference nodeReference = new SpyObjectReference().application("CustomerManagement")
				.messageFlow("gen.CustomerManagement").node("Create_Customer (Implementation)");

		// Initialise a NodeSpy
		NodeSpy nodeSpy = new NodeSpy(nodeReference);

		// Declare a new TestMessageAssembly object for the message being sent into the node
		TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

		// Add Local Environment to Message Assembly for HTTP
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[0]").setValue("spi");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[1]").setValue("v1");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.Path.Segment[2]").setValue("CreateCustomer");

		// Add Local Environment to Message Assembly for REST
		inputMessageAssembly.localEnvironmentPath("REST.Input.Method").setValue("POST");
		inputMessageAssembly.localEnvironmentPath("REST.Input.Operation").setValue("Create_Customer");
		inputMessageAssembly.localEnvironmentPath("REST.Input.Path").setValue("/spi/v1/CreateCustomer");
		inputMessageAssembly.localEnvironmentPath("REST.Input.URI")
				.setValue("http://localhost:7080/spi/v1/CreateCustomer");

		// Create a Message Assembly from the input data file
		try {
			String inputResourcePath = "/Create_Customer_subflow_input_data.json";
			InputStream resourceStream = Thread.currentThread().getContextClassLoader()
					.getResourceAsStream(inputResourcePath);
			if (resourceStream == null) {
				throw new TestException("Unable to locate resource: " + inputResourcePath);
			}
			inputMessageAssembly.buildJSONMessage(resourceStream);
		} catch (Exception ex) {
			throw new TestException("Failed to load input message", ex);
		}

		// Call the message flow node with the Message Assembly
		nodeSpy.evaluate(inputMessageAssembly, true, "Input");

		// Assert the number of times that the node is called
		assertThat(nodeSpy, nodeCallCountIs(1));

		// Assert the terminal propagate count for the message
		assertThat(nodeSpy, terminalPropagateCountIs("Output", 1));

		// Compare Output Message 1 at output terminal Output

		try {

			TestMessageAssembly actualMessageAssembly = null;
			String actualOutputData = null;
			String expectedOutputData = null;

			// Get the TestMessageAssembly object for the actual propagated message
			actualMessageAssembly = nodeSpy.propagatedMessageAssembly("Output", 1);

			// Assert output message body data
			// Get the string containing the actual data that was propagated from the node
			actualOutputData = actualMessageAssembly.getMessageBodyAsString();

			// Create an InputStream from the expected resource
			String expectedResourcePath = "/Create_Customer_subflow_output_data.json";
			InputStream resourceStream = Thread.currentThread().getContextClassLoader()
					.getResourceAsStream(expectedResourcePath);
			if (resourceStream == null) {
				throw new TestException("Unable to locate resource: " + expectedResourcePath);
			}
			byte[] buffer = new byte[resourceStream.available()];
			resourceStream.read(buffer);

			// Get the expected output data using output data file
			expectedOutputData = new String(buffer, StandardCharsets.UTF_8);

			// Assert that the actual data matches the expected data
			assertThat(actualOutputData, jsonEquals(expectedOutputData));

		} catch (Exception ex) {
			throw new TestException("Failed to compare with expected message", ex);
		}

	}

}
